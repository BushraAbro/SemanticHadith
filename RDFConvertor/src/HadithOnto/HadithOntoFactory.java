package HadithOnto;

import HadithOnto.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: HadithOntoFactory<br>
 * @version generated on Thu Jan 10 15:58:46 PKT 2019 by Bushra
 */
public class HadithOntoFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public HadithOntoFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public HadithOntoFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://mlode.nlp2rdf.org/quranvocab#Verse
     */

    {
        javaMapping.add("http://mlode.nlp2rdf.org/quranvocab#Verse", Verse.class, DefaultVerse.class);
    }

    /**
     * Creates an instance of type Verse.  Modifies the underlying ontology.
     */
    public Verse createVerse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }

    /**
     * Gets an instance of type Verse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Verse getVerse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }

    /**
     * Gets all instances of Verse from the ontology.
     */
    public Collection<? extends Verse> getAllVerseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }


    /* ***************************************************
     * Class http://quranontology.com/Resource/City
     */

    {
        javaMapping.add("http://quranontology.com/Resource/City", City.class, DefaultCity.class);
    }

    /**
     * Creates an instance of type City.  Modifies the underlying ontology.
     */
    public City createCity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CITY, DefaultCity.class);
    }

    /**
     * Gets an instance of type City with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public City getCity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CITY, DefaultCity.class);
    }

    /**
     * Gets all instances of City from the ontology.
     */
    public Collection<? extends City> getAllCityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CITY, DefaultCity.class);
    }


    /* ***************************************************
     * Class http://quranontology.com/Resource/HistoricEvent
     */

    {
        javaMapping.add("http://quranontology.com/Resource/HistoricEvent", HistoricEvent.class, DefaultHistoricEvent.class);
    }

    /**
     * Creates an instance of type HistoricEvent.  Modifies the underlying ontology.
     */
    public HistoricEvent createHistoricEvent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HISTORICEVENT, DefaultHistoricEvent.class);
    }

    /**
     * Gets an instance of type HistoricEvent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HistoricEvent getHistoricEvent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HISTORICEVENT, DefaultHistoricEvent.class);
    }

    /**
     * Gets all instances of HistoricEvent from the ontology.
     */
    public Collection<? extends HistoricEvent> getAllHistoricEventInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HISTORICEVENT, DefaultHistoricEvent.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#AfterLifeEvent
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#AfterLifeEvent", AfterLifeEvent.class, DefaultAfterLifeEvent.class);
    }

    /**
     * Creates an instance of type AfterLifeEvent.  Modifies the underlying ontology.
     */
    public AfterLifeEvent createAfterLifeEvent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AFTERLIFEEVENT, DefaultAfterLifeEvent.class);
    }

    /**
     * Gets an instance of type AfterLifeEvent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AfterLifeEvent getAfterLifeEvent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AFTERLIFEEVENT, DefaultAfterLifeEvent.class);
    }

    /**
     * Gets all instances of AfterLifeEvent from the ontology.
     */
    public Collection<? extends AfterLifeEvent> getAllAfterLifeEventInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AFTERLIFEEVENT, DefaultAfterLifeEvent.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Angel
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Angel", Angel.class, DefaultAngel.class);
    }

    /**
     * Creates an instance of type Angel.  Modifies the underlying ontology.
     */
    public Angel createAngel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANGEL, DefaultAngel.class);
    }

    /**
     * Gets an instance of type Angel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Angel getAngel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANGEL, DefaultAngel.class);
    }

    /**
     * Gets all instances of Angel from the ontology.
     */
    public Collection<? extends Angel> getAllAngelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANGEL, DefaultAngel.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Animal
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Animal", Animal.class, DefaultAnimal.class);
    }

    /**
     * Creates an instance of type Animal.  Modifies the underlying ontology.
     */
    public Animal createAnimal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    /**
     * Gets an instance of type Animal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Animal getAnimal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    /**
     * Gets all instances of Animal from the ontology.
     */
    public Collection<? extends Animal> getAllAnimalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Assertion
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Assertion", Assertion.class, DefaultAssertion.class);
    }

    /**
     * Creates an instance of type Assertion.  Modifies the underlying ontology.
     */
    public Assertion createAssertion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ASSERTION, DefaultAssertion.class);
    }

    /**
     * Gets an instance of type Assertion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Assertion getAssertion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ASSERTION, DefaultAssertion.class);
    }

    /**
     * Gets all instances of Assertion from the ontology.
     */
    public Collection<? extends Assertion> getAllAssertionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ASSERTION, DefaultAssertion.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#BadriCompanion
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#BadriCompanion", BadriCompanion.class, DefaultBadriCompanion.class);
    }

    /**
     * Creates an instance of type BadriCompanion.  Modifies the underlying ontology.
     */
    public BadriCompanion createBadriCompanion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BADRICOMPANION, DefaultBadriCompanion.class);
    }

    /**
     * Gets an instance of type BadriCompanion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BadriCompanion getBadriCompanion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BADRICOMPANION, DefaultBadriCompanion.class);
    }

    /**
     * Gets all instances of BadriCompanion from the ontology.
     */
    public Collection<? extends BadriCompanion> getAllBadriCompanionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BADRICOMPANION, DefaultBadriCompanion.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Believer
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Believer", Believer.class, DefaultBeliever.class);
    }

    /**
     * Creates an instance of type Believer.  Modifies the underlying ontology.
     */
    public Believer createBeliever(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BELIEVER, DefaultBeliever.class);
    }

    /**
     * Gets an instance of type Believer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Believer getBeliever(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BELIEVER, DefaultBeliever.class);
    }

    /**
     * Gets all instances of Believer from the ontology.
     */
    public Collection<? extends Believer> getAllBelieverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BELIEVER, DefaultBeliever.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Birth
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Birth", Birth.class, DefaultBirth.class);
    }

    /**
     * Creates an instance of type Birth.  Modifies the underlying ontology.
     */
    public Birth createBirth(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BIRTH, DefaultBirth.class);
    }

    /**
     * Gets an instance of type Birth with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Birth getBirth(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BIRTH, DefaultBirth.class);
    }

    /**
     * Gets all instances of Birth from the ontology.
     */
    public Collection<? extends Birth> getAllBirthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BIRTH, DefaultBirth.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Companion
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Companion", Companion.class, DefaultCompanion.class);
    }

    /**
     * Creates an instance of type Companion.  Modifies the underlying ontology.
     */
    public Companion createCompanion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPANION, DefaultCompanion.class);
    }

    /**
     * Gets an instance of type Companion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Companion getCompanion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPANION, DefaultCompanion.class);
    }

    /**
     * Gets all instances of Companion from the ontology.
     */
    public Collection<? extends Companion> getAllCompanionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPANION, DefaultCompanion.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#ConversionToIslam
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#ConversionToIslam", ConversionToIslam.class, DefaultConversionToIslam.class);
    }

    /**
     * Creates an instance of type ConversionToIslam.  Modifies the underlying ontology.
     */
    public ConversionToIslam createConversionToIslam(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONVERSIONTOISLAM, DefaultConversionToIslam.class);
    }

    /**
     * Gets an instance of type ConversionToIslam with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConversionToIslam getConversionToIslam(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONVERSIONTOISLAM, DefaultConversionToIslam.class);
    }

    /**
     * Gets all instances of ConversionToIslam from the ontology.
     */
    public Collection<? extends ConversionToIslam> getAllConversionToIslamInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONVERSIONTOISLAM, DefaultConversionToIslam.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Death
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Death", Death.class, DefaultDeath.class);
    }

    /**
     * Creates an instance of type Death.  Modifies the underlying ontology.
     */
    public Death createDeath(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEATH, DefaultDeath.class);
    }

    /**
     * Gets an instance of type Death with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Death getDeath(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEATH, DefaultDeath.class);
    }

    /**
     * Gets all instances of Death from the ontology.
     */
    public Collection<? extends Death> getAllDeathInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEATH, DefaultDeath.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Delegation
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Delegation", Delegation.class, DefaultDelegation.class);
    }

    /**
     * Creates an instance of type Delegation.  Modifies the underlying ontology.
     */
    public Delegation createDelegation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DELEGATION, DefaultDelegation.class);
    }

    /**
     * Gets an instance of type Delegation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Delegation getDelegation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DELEGATION, DefaultDelegation.class);
    }

    /**
     * Gets all instances of Delegation from the ontology.
     */
    public Collection<? extends Delegation> getAllDelegationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DELEGATION, DefaultDelegation.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#DivineLocation
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#DivineLocation", DivineLocation.class, DefaultDivineLocation.class);
    }

    /**
     * Creates an instance of type DivineLocation.  Modifies the underlying ontology.
     */
    public DivineLocation createDivineLocation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIVINELOCATION, DefaultDivineLocation.class);
    }

    /**
     * Gets an instance of type DivineLocation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DivineLocation getDivineLocation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIVINELOCATION, DefaultDivineLocation.class);
    }

    /**
     * Gets all instances of DivineLocation from the ontology.
     */
    public Collection<? extends DivineLocation> getAllDivineLocationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIVINELOCATION, DefaultDivineLocation.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Divorce
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Divorce", Divorce.class, DefaultDivorce.class);
    }

    /**
     * Creates an instance of type Divorce.  Modifies the underlying ontology.
     */
    public Divorce createDivorce(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIVORCE, DefaultDivorce.class);
    }

    /**
     * Gets an instance of type Divorce with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Divorce getDivorce(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIVORCE, DefaultDivorce.class);
    }

    /**
     * Gets all instances of Divorce from the ontology.
     */
    public Collection<? extends Divorce> getAllDivorceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIVORCE, DefaultDivorce.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Event
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Event", Event.class, DefaultEvent.class);
    }

    /**
     * Creates an instance of type Event.  Modifies the underlying ontology.
     */
    public Event createEvent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EVENT, DefaultEvent.class);
    }

    /**
     * Gets an instance of type Event with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Event getEvent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EVENT, DefaultEvent.class);
    }

    /**
     * Gets all instances of Event from the ontology.
     */
    public Collection<? extends Event> getAllEventInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EVENT, DefaultEvent.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#GeographicalLocation
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#GeographicalLocation", GeographicalLocation.class, DefaultGeographicalLocation.class);
    }

    /**
     * Creates an instance of type GeographicalLocation.  Modifies the underlying ontology.
     */
    public GeographicalLocation createGeographicalLocation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GEOGRAPHICALLOCATION, DefaultGeographicalLocation.class);
    }

    /**
     * Gets an instance of type GeographicalLocation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GeographicalLocation getGeographicalLocation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GEOGRAPHICALLOCATION, DefaultGeographicalLocation.class);
    }

    /**
     * Gets all instances of GeographicalLocation from the ontology.
     */
    public Collection<? extends GeographicalLocation> getAllGeographicalLocationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GEOGRAPHICALLOCATION, DefaultGeographicalLocation.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Ghazwa
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Ghazwa", Ghazwa.class, DefaultGhazwa.class);
    }

    /**
     * Creates an instance of type Ghazwa.  Modifies the underlying ontology.
     */
    public Ghazwa createGhazwa(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GHAZWA, DefaultGhazwa.class);
    }

    /**
     * Gets an instance of type Ghazwa with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ghazwa getGhazwa(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GHAZWA, DefaultGhazwa.class);
    }

    /**
     * Gets all instances of Ghazwa from the ontology.
     */
    public Collection<? extends Ghazwa> getAllGhazwaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GHAZWA, DefaultGhazwa.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#GodPunishment
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#GodPunishment", GodPunishment.class, DefaultGodPunishment.class);
    }

    /**
     * Creates an instance of type GodPunishment.  Modifies the underlying ontology.
     */
    public GodPunishment createGodPunishment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GODPUNISHMENT, DefaultGodPunishment.class);
    }

    /**
     * Gets an instance of type GodPunishment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GodPunishment getGodPunishment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GODPUNISHMENT, DefaultGodPunishment.class);
    }

    /**
     * Gets all instances of GodPunishment from the ontology.
     */
    public Collection<? extends GodPunishment> getAllGodPunishmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GODPUNISHMENT, DefaultGodPunishment.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Hadith
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Hadith", Hadith.class, DefaultHadith.class);
    }

    /**
     * Creates an instance of type Hadith.  Modifies the underlying ontology.
     */
    public Hadith createHadith(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }

    /**
     * Gets an instance of type Hadith with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hadith getHadith(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }

    /**
     * Gets all instances of Hadith from the ontology.
     */
    public Collection<? extends Hadith> getAllHadithInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithBook
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithBook", HadithBook.class, DefaultHadithBook.class);
    }

    /**
     * Creates an instance of type HadithBook.  Modifies the underlying ontology.
     */
    public HadithBook createHadithBook(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }

    /**
     * Gets an instance of type HadithBook with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithBook getHadithBook(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }

    /**
     * Gets all instances of HadithBook from the ontology.
     */
    public Collection<? extends HadithBook> getAllHadithBookInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithChapter
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithChapter", HadithChapter.class, DefaultHadithChapter.class);
    }

    /**
     * Creates an instance of type HadithChapter.  Modifies the underlying ontology.
     */
    public HadithChapter createHadithChapter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }

    /**
     * Gets an instance of type HadithChapter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithChapter getHadithChapter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }

    /**
     * Gets all instances of HadithChapter from the ontology.
     */
    public Collection<? extends HadithChapter> getAllHadithChapterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithCollection
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithCollection", HadithCollection.class, DefaultHadithCollection.class);
    }

    /**
     * Creates an instance of type HadithCollection.  Modifies the underlying ontology.
     */
    public HadithCollection createHadithCollection(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }

    /**
     * Gets an instance of type HadithCollection with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithCollection getHadithCollection(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }

    /**
     * Gets all instances of HadithCollection from the ontology.
     */
    public Collection<? extends HadithCollection> getAllHadithCollectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithCollectionAuthor
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithCollectionAuthor", HadithCollectionAuthor.class, DefaultHadithCollectionAuthor.class);
    }

    /**
     * Creates an instance of type HadithCollectionAuthor.  Modifies the underlying ontology.
     */
    public HadithCollectionAuthor createHadithCollectionAuthor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTIONAUTHOR, DefaultHadithCollectionAuthor.class);
    }

    /**
     * Gets an instance of type HadithCollectionAuthor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithCollectionAuthor getHadithCollectionAuthor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTIONAUTHOR, DefaultHadithCollectionAuthor.class);
    }

    /**
     * Gets all instances of HadithCollectionAuthor from the ontology.
     */
    public Collection<? extends HadithCollectionAuthor> getAllHadithCollectionAuthorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHCOLLECTIONAUTHOR, DefaultHadithCollectionAuthor.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithMatan
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithMatan", HadithMatan.class, DefaultHadithMatan.class);
    }

    /**
     * Creates an instance of type HadithMatan.  Modifies the underlying ontology.
     */
    public HadithMatan createHadithMatan(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHMATAN, DefaultHadithMatan.class);
    }

    /**
     * Gets an instance of type HadithMatan with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithMatan getHadithMatan(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHMATAN, DefaultHadithMatan.class);
    }

    /**
     * Gets all instances of HadithMatan from the ontology.
     */
    public Collection<? extends HadithMatan> getAllHadithMatanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHMATAN, DefaultHadithMatan.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithNarrator
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithNarrator", HadithNarrator.class, DefaultHadithNarrator.class);
    }

    /**
     * Creates an instance of type HadithNarrator.  Modifies the underlying ontology.
     */
    public HadithNarrator createHadithNarrator(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHNARRATOR, DefaultHadithNarrator.class);
    }

    /**
     * Gets an instance of type HadithNarrator with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithNarrator getHadithNarrator(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHNARRATOR, DefaultHadithNarrator.class);
    }

    /**
     * Gets all instances of HadithNarrator from the ontology.
     */
    public Collection<? extends HadithNarrator> getAllHadithNarratorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHNARRATOR, DefaultHadithNarrator.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithSanad
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithSanad", HadithSanad.class, DefaultHadithSanad.class);
    }

    /**
     * Creates an instance of type HadithSanad.  Modifies the underlying ontology.
     */
    public HadithSanad createHadithSanad(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHSANAD, DefaultHadithSanad.class);
    }

    /**
     * Gets an instance of type HadithSanad with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithSanad getHadithSanad(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHSANAD, DefaultHadithSanad.class);
    }

    /**
     * Gets all instances of HadithSanad from the ontology.
     */
    public Collection<? extends HadithSanad> getAllHadithSanadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHSANAD, DefaultHadithSanad.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Heaven
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Heaven", Heaven.class, DefaultHeaven.class);
    }

    /**
     * Creates an instance of type Heaven.  Modifies the underlying ontology.
     */
    public Heaven createHeaven(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEAVEN, DefaultHeaven.class);
    }

    /**
     * Gets an instance of type Heaven with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Heaven getHeaven(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEAVEN, DefaultHeaven.class);
    }

    /**
     * Gets all instances of Heaven from the ontology.
     */
    public Collection<? extends Heaven> getAllHeavenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEAVEN, DefaultHeaven.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Hell
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Hell", Hell.class, DefaultHell.class);
    }

    /**
     * Creates an instance of type Hell.  Modifies the underlying ontology.
     */
    public Hell createHell(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HELL, DefaultHell.class);
    }

    /**
     * Gets an instance of type Hell with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hell getHell(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HELL, DefaultHell.class);
    }

    /**
     * Gets all instances of Hell from the ontology.
     */
    public Collection<? extends Hell> getAllHellInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HELL, DefaultHell.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HistoricPerson
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HistoricPerson", HistoricPerson.class, DefaultHistoricPerson.class);
    }

    /**
     * Creates an instance of type HistoricPerson.  Modifies the underlying ontology.
     */
    public HistoricPerson createHistoricPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HISTORICPERSON, DefaultHistoricPerson.class);
    }

    /**
     * Gets an instance of type HistoricPerson with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HistoricPerson getHistoricPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HISTORICPERSON, DefaultHistoricPerson.class);
    }

    /**
     * Gets all instances of HistoricPerson from the ontology.
     */
    public Collection<? extends HistoricPerson> getAllHistoricPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HISTORICPERSON, DefaultHistoricPerson.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Human
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Human", Human.class, DefaultHuman.class);
    }

    /**
     * Creates an instance of type Human.  Modifies the underlying ontology.
     */
    public Human createHuman(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HUMAN, DefaultHuman.class);
    }

    /**
     * Gets an instance of type Human with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Human getHuman(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HUMAN, DefaultHuman.class);
    }

    /**
     * Gets all instances of Human from the ontology.
     */
    public Collection<? extends Human> getAllHumanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HUMAN, DefaultHuman.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Jinn
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Jinn", Jinn.class, DefaultJinn.class);
    }

    /**
     * Creates an instance of type Jinn.  Modifies the underlying ontology.
     */
    public Jinn createJinn(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_JINN, DefaultJinn.class);
    }

    /**
     * Gets an instance of type Jinn with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Jinn getJinn(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_JINN, DefaultJinn.class);
    }

    /**
     * Gets all instances of Jinn from the ontology.
     */
    public Collection<? extends Jinn> getAllJinnInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_JINN, DefaultJinn.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Journey
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Journey", Journey.class, DefaultJourney.class);
    }

    /**
     * Creates an instance of type Journey.  Modifies the underlying ontology.
     */
    public Journey createJourney(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_JOURNEY, DefaultJourney.class);
    }

    /**
     * Gets an instance of type Journey with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Journey getJourney(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_JOURNEY, DefaultJourney.class);
    }

    /**
     * Gets all instances of Journey from the ontology.
     */
    public Collection<? extends Journey> getAllJourneyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_JOURNEY, DefaultJourney.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#LandmarksOrHistoricalBuildings
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#LandmarksOrHistoricalBuildings", LandmarksOrHistoricalBuildings.class, DefaultLandmarksOrHistoricalBuildings.class);
    }

    /**
     * Creates an instance of type LandmarksOrHistoricalBuildings.  Modifies the underlying ontology.
     */
    public LandmarksOrHistoricalBuildings createLandmarksOrHistoricalBuildings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LANDMARKSORHISTORICALBUILDINGS, DefaultLandmarksOrHistoricalBuildings.class);
    }

    /**
     * Gets an instance of type LandmarksOrHistoricalBuildings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LandmarksOrHistoricalBuildings getLandmarksOrHistoricalBuildings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LANDMARKSORHISTORICALBUILDINGS, DefaultLandmarksOrHistoricalBuildings.class);
    }

    /**
     * Gets all instances of LandmarksOrHistoricalBuildings from the ontology.
     */
    public Collection<? extends LandmarksOrHistoricalBuildings> getAllLandmarksOrHistoricalBuildingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LANDMARKSORHISTORICALBUILDINGS, DefaultLandmarksOrHistoricalBuildings.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#LivingCreation
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#LivingCreation", LivingCreation.class, DefaultLivingCreation.class);
    }

    /**
     * Creates an instance of type LivingCreation.  Modifies the underlying ontology.
     */
    public LivingCreation createLivingCreation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIVINGCREATION, DefaultLivingCreation.class);
    }

    /**
     * Gets an instance of type LivingCreation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LivingCreation getLivingCreation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIVINGCREATION, DefaultLivingCreation.class);
    }

    /**
     * Gets all instances of LivingCreation from the ontology.
     */
    public Collection<? extends LivingCreation> getAllLivingCreationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIVINGCREATION, DefaultLivingCreation.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Marriage
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Marriage", Marriage.class, DefaultMarriage.class);
    }

    /**
     * Creates an instance of type Marriage.  Modifies the underlying ontology.
     */
    public Marriage createMarriage(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MARRIAGE, DefaultMarriage.class);
    }

    /**
     * Gets an instance of type Marriage with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Marriage getMarriage(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MARRIAGE, DefaultMarriage.class);
    }

    /**
     * Gets all instances of Marriage from the ontology.
     */
    public Collection<? extends Marriage> getAllMarriageInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MARRIAGE, DefaultMarriage.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Migration
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Migration", Migration.class, DefaultMigration.class);
    }

    /**
     * Creates an instance of type Migration.  Modifies the underlying ontology.
     */
    public Migration createMigration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MIGRATION, DefaultMigration.class);
    }

    /**
     * Gets an instance of type Migration with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Migration getMigration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MIGRATION, DefaultMigration.class);
    }

    /**
     * Gets all instances of Migration from the ontology.
     */
    public Collection<? extends Migration> getAllMigrationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MIGRATION, DefaultMigration.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#MilitaryConflict
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#MilitaryConflict", MilitaryConflict.class, DefaultMilitaryConflict.class);
    }

    /**
     * Creates an instance of type MilitaryConflict.  Modifies the underlying ontology.
     */
    public MilitaryConflict createMilitaryConflict(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MILITARYCONFLICT, DefaultMilitaryConflict.class);
    }

    /**
     * Gets an instance of type MilitaryConflict with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MilitaryConflict getMilitaryConflict(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MILITARYCONFLICT, DefaultMilitaryConflict.class);
    }

    /**
     * Gets all instances of MilitaryConflict from the ontology.
     */
    public Collection<? extends MilitaryConflict> getAllMilitaryConflictInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MILITARYCONFLICT, DefaultMilitaryConflict.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Miracle
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Miracle", Miracle.class, DefaultMiracle.class);
    }

    /**
     * Creates an instance of type Miracle.  Modifies the underlying ontology.
     */
    public Miracle createMiracle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MIRACLE, DefaultMiracle.class);
    }

    /**
     * Gets an instance of type Miracle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Miracle getMiracle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MIRACLE, DefaultMiracle.class);
    }

    /**
     * Gets all instances of Miracle from the ontology.
     */
    public Collection<? extends Miracle> getAllMiracleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MIRACLE, DefaultMiracle.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Mountain
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Mountain", Mountain.class, DefaultMountain.class);
    }

    /**
     * Creates an instance of type Mountain.  Modifies the underlying ontology.
     */
    public Mountain createMountain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOUNTAIN, DefaultMountain.class);
    }

    /**
     * Gets an instance of type Mountain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mountain getMountain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOUNTAIN, DefaultMountain.class);
    }

    /**
     * Gets all instances of Mountain from the ontology.
     */
    public Collection<? extends Mountain> getAllMountainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOUNTAIN, DefaultMountain.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#NonBeliever
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#NonBeliever", NonBeliever.class, DefaultNonBeliever.class);
    }

    /**
     * Creates an instance of type NonBeliever.  Modifies the underlying ontology.
     */
    public NonBeliever createNonBeliever(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONBELIEVER, DefaultNonBeliever.class);
    }

    /**
     * Gets an instance of type NonBeliever with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NonBeliever getNonBeliever(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONBELIEVER, DefaultNonBeliever.class);
    }

    /**
     * Gets all instances of NonBeliever from the ontology.
     */
    public Collection<? extends NonBeliever> getAllNonBelieverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONBELIEVER, DefaultNonBeliever.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Person
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Place
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Place", Place.class, DefaultPlace.class);
    }

    /**
     * Creates an instance of type Place.  Modifies the underlying ontology.
     */
    public Place createPlace(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }

    /**
     * Gets an instance of type Place with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Place getPlace(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }

    /**
     * Gets all instances of Place from the ontology.
     */
    public Collection<? extends Place> getAllPlaceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Prediction
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Prediction", Prediction.class, DefaultPrediction.class);
    }

    /**
     * Creates an instance of type Prediction.  Modifies the underlying ontology.
     */
    public Prediction createPrediction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PREDICTION, DefaultPrediction.class);
    }

    /**
     * Gets an instance of type Prediction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Prediction getPrediction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PREDICTION, DefaultPrediction.class);
    }

    /**
     * Gets all instances of Prediction from the ontology.
     */
    public Collection<? extends Prediction> getAllPredictionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PREDICTION, DefaultPrediction.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Prophet
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Prophet", Prophet.class, DefaultProphet.class);
    }

    /**
     * Creates an instance of type Prophet.  Modifies the underlying ontology.
     */
    public Prophet createProphet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROPHET, DefaultProphet.class);
    }

    /**
     * Gets an instance of type Prophet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Prophet getProphet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROPHET, DefaultProphet.class);
    }

    /**
     * Gets all instances of Prophet from the ontology.
     */
    public Collection<? extends Prophet> getAllProphetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROPHET, DefaultProphet.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Revelation
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Revelation", Revelation.class, DefaultRevelation.class);
    }

    /**
     * Creates an instance of type Revelation.  Modifies the underlying ontology.
     */
    public Revelation createRevelation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REVELATION, DefaultRevelation.class);
    }

    /**
     * Gets an instance of type Revelation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Revelation getRevelation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REVELATION, DefaultRevelation.class);
    }

    /**
     * Gets all instances of Revelation from the ontology.
     */
    public Collection<? extends Revelation> getAllRevelationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REVELATION, DefaultRevelation.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#River
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#River", River.class, DefaultRiver.class);
    }

    /**
     * Creates an instance of type River.  Modifies the underlying ontology.
     */
    public River createRiver(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RIVER, DefaultRiver.class);
    }

    /**
     * Gets an instance of type River with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public River getRiver(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RIVER, DefaultRiver.class);
    }

    /**
     * Gets all instances of River from the ontology.
     */
    public Collection<? extends River> getAllRiverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RIVER, DefaultRiver.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#RootNarrrator
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#RootNarrrator", RootNarrrator.class, DefaultRootNarrrator.class);
    }

    /**
     * Creates an instance of type RootNarrrator.  Modifies the underlying ontology.
     */
    public RootNarrrator createRootNarrrator(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROOTNARRRATOR, DefaultRootNarrrator.class);
    }

    /**
     * Gets an instance of type RootNarrrator with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RootNarrrator getRootNarrrator(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROOTNARRRATOR, DefaultRootNarrrator.class);
    }

    /**
     * Gets all instances of RootNarrrator from the ontology.
     */
    public Collection<? extends RootNarrrator> getAllRootNarrratorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROOTNARRRATOR, DefaultRootNarrrator.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Sea
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Sea", Sea.class, DefaultSea.class);
    }

    /**
     * Creates an instance of type Sea.  Modifies the underlying ontology.
     */
    public Sea createSea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEA, DefaultSea.class);
    }

    /**
     * Gets an instance of type Sea with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sea getSea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEA, DefaultSea.class);
    }

    /**
     * Gets all instances of Sea from the ontology.
     */
    public Collection<? extends Sea> getAllSeaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEA, DefaultSea.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#TradeJourney
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#TradeJourney", TradeJourney.class, DefaultTradeJourney.class);
    }

    /**
     * Creates an instance of type TradeJourney.  Modifies the underlying ontology.
     */
    public TradeJourney createTradeJourney(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRADEJOURNEY, DefaultTradeJourney.class);
    }

    /**
     * Gets an instance of type TradeJourney with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TradeJourney getTradeJourney(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRADEJOURNEY, DefaultTradeJourney.class);
    }

    /**
     * Gets all instances of TradeJourney from the ontology.
     */
    public Collection<? extends TradeJourney> getAllTradeJourneyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRADEJOURNEY, DefaultTradeJourney.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Tribe
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Tribe", Tribe.class, DefaultTribe.class);
    }

    /**
     * Creates an instance of type Tribe.  Modifies the underlying ontology.
     */
    public Tribe createTribe(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRIBE, DefaultTribe.class);
    }

    /**
     * Gets an instance of type Tribe with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tribe getTribe(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRIBE, DefaultTribe.class);
    }

    /**
     * Gets all instances of Tribe from the ontology.
     */
    public Collection<? extends Tribe> getAllTribeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRIBE, DefaultTribe.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc##GroupOfPeople
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc##GroupOfPeople", GroupOfPeople.class, DefaultGroupOfPeople.class);
    }

    /**
     * Creates an instance of type GroupOfPeople.  Modifies the underlying ontology.
     */
    public GroupOfPeople createGroupOfPeople(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GROUPOFPEOPLE, DefaultGroupOfPeople.class);
    }

    /**
     * Gets an instance of type GroupOfPeople with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GroupOfPeople getGroupOfPeople(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GROUPOFPEOPLE, DefaultGroupOfPeople.class);
    }

    /**
     * Gets all instances of GroupOfPeople from the ontology.
     */
    public Collection<? extends GroupOfPeople> getAllGroupOfPeopleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GROUPOFPEOPLE, DefaultGroupOfPeople.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc'#AfterlifeLocation
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc'#AfterlifeLocation", AfterlifeLocation.class, DefaultAfterlifeLocation.class);
    }

    /**
     * Creates an instance of type AfterlifeLocation.  Modifies the underlying ontology.
     */
    public AfterlifeLocation createAfterlifeLocation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AFTERLIFELOCATION, DefaultAfterlifeLocation.class);
    }

    /**
     * Gets an instance of type AfterlifeLocation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AfterlifeLocation getAfterlifeLocation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AFTERLIFELOCATION, DefaultAfterlifeLocation.class);
    }

    /**
     * Gets all instances of AfterlifeLocation from the ontology.
     */
    public Collection<? extends AfterlifeLocation> getAllAfterlifeLocationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AFTERLIFELOCATION, DefaultAfterlifeLocation.class);
    }


}
