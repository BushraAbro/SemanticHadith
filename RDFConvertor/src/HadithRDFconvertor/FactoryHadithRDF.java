package HadithRDFconvertor;

import HadithRDFconvertor.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: FactoryHadithRDF<br>
 * @version generated on Mon Aug 08 23:13:09 PKT 2016 by Bushra
 */
public class FactoryHadithRDF implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public FactoryHadithRDF(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public FactoryHadithRDF(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://mlode.nlp2rdf.org/quranvocab#Verse
     */

    {
        javaMapping.add("http://mlode.nlp2rdf.org/quranvocab#Verse", Verse.class, DefaultVerse.class);
    }

    /**
     * Creates an instance of type Verse.  Modifies the underlying ontology.
     */
    public Verse createVerse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }

    /**
     * Gets an instance of type Verse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Verse getVerse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }

    /**
     * Gets all instances of Verse from the ontology.
     */
    public Collection<? extends Verse> getAllVerseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }


    /* ***************************************************
     * Class http://quranontology.com/Resource/City
     */

    {
        javaMapping.add("http://quranontology.com/Resource/City", City.class, DefaultCity.class);
    }

    /**
     * Creates an instance of type City.  Modifies the underlying ontology.
     */
    public City createCity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CITY, DefaultCity.class);
    }

    /**
     * Gets an instance of type City with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public City getCity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CITY, DefaultCity.class);
    }

    /**
     * Gets all instances of City from the ontology.
     */
    public Collection<? extends City> getAllCityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CITY, DefaultCity.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#Hadith
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#Hadith", Hadith.class, DefaultHadith.class);
    }

    /**
     * Creates an instance of type Hadith.  Modifies the underlying ontology.
     */
    public Hadith createHadith(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }

    /**
     * Gets an instance of type Hadith with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hadith getHadith(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }

    /**
     * Gets all instances of Hadith from the ontology.
     */
    public Collection<? extends Hadith> getAllHadithInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITH, DefaultHadith.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithBook
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithBook", HadithBook.class, DefaultHadithBook.class);
    }

    /**
     * Creates an instance of type HadithBook.  Modifies the underlying ontology.
     */
    public HadithBook createHadithBook(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }

    /**
     * Gets an instance of type HadithBook with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithBook getHadithBook(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }

    /**
     * Gets all instances of HadithBook from the ontology.
     */
    public Collection<? extends HadithBook> getAllHadithBookInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHBOOK, DefaultHadithBook.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithChapter
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithChapter", HadithChapter.class, DefaultHadithChapter.class);
    }

    /**
     * Creates an instance of type HadithChapter.  Modifies the underlying ontology.
     */
    public HadithChapter createHadithChapter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }

    /**
     * Gets an instance of type HadithChapter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithChapter getHadithChapter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }

    /**
     * Gets all instances of HadithChapter from the ontology.
     */
    public Collection<? extends HadithChapter> getAllHadithChapterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHCHAPTER, DefaultHadithChapter.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithCollection
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithCollection", HadithCollection.class, DefaultHadithCollection.class);
    }

    /**
     * Creates an instance of type HadithCollection.  Modifies the underlying ontology.
     */
    public HadithCollection createHadithCollection(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }

    /**
     * Gets an instance of type HadithCollection with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithCollection getHadithCollection(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }

    /**
     * Gets all instances of HadithCollection from the ontology.
     */
    public Collection<? extends HadithCollection> getAllHadithCollectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHCOLLECTION, DefaultHadithCollection.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithMatan
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithMatan", HadithMatan.class, DefaultHadithMatan.class);
    }

    /**
     * Creates an instance of type HadithMatan.  Modifies the underlying ontology.
     */
    public HadithMatan createHadithMatan(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHMATAN, DefaultHadithMatan.class);
    }

    /**
     * Gets an instance of type HadithMatan with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithMatan getHadithMatan(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHMATAN, DefaultHadithMatan.class);
    }

    /**
     * Gets all instances of HadithMatan from the ontology.
     */
    public Collection<? extends HadithMatan> getAllHadithMatanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHMATAN, DefaultHadithMatan.class);
    }


    /* ***************************************************
     * Class http://www.lodislamica.me/ontology/hadithVoc#HadithSanad
     */

    {
        javaMapping.add("http://www.lodislamica.me/ontology/hadithVoc#HadithSanad", HadithSanad.class, DefaultHadithSanad.class);
    }

    /**
     * Creates an instance of type HadithSanad.  Modifies the underlying ontology.
     */
    public HadithSanad createHadithSanad(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HADITHSANAD, DefaultHadithSanad.class);
    }

    /**
     * Gets an instance of type HadithSanad with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HadithSanad getHadithSanad(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HADITHSANAD, DefaultHadithSanad.class);
    }

    /**
     * Gets all instances of HadithSanad from the ontology.
     */
    public Collection<? extends HadithSanad> getAllHadithSanadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HADITHSANAD, DefaultHadithSanad.class);
    }


}
